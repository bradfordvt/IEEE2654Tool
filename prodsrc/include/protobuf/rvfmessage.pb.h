// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rvfmessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rvfmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rvfmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rvfmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rvfmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rvfmessage_2eproto;
namespace RVF {
class RVFCommand;
class RVFCommandDefaultTypeInternal;
extern RVFCommandDefaultTypeInternal _RVFCommand_default_instance_;
class RVFDataValue;
class RVFDataValueDefaultTypeInternal;
extern RVFDataValueDefaultTypeInternal _RVFDataValue_default_instance_;
class RVFError;
class RVFErrorDefaultTypeInternal;
extern RVFErrorDefaultTypeInternal _RVFError_default_instance_;
class RVFMessage;
class RVFMessageDefaultTypeInternal;
extern RVFMessageDefaultTypeInternal _RVFMessage_default_instance_;
class RVFSelectEvent;
class RVFSelectEventDefaultTypeInternal;
extern RVFSelectEventDefaultTypeInternal _RVFSelectEvent_default_instance_;
class RVFStatus;
class RVFStatusDefaultTypeInternal;
extern RVFStatusDefaultTypeInternal _RVFStatus_default_instance_;
}  // namespace RVF
PROTOBUF_NAMESPACE_OPEN
template<> ::RVF::RVFCommand* Arena::CreateMaybeMessage<::RVF::RVFCommand>(Arena*);
template<> ::RVF::RVFDataValue* Arena::CreateMaybeMessage<::RVF::RVFDataValue>(Arena*);
template<> ::RVF::RVFError* Arena::CreateMaybeMessage<::RVF::RVFError>(Arena*);
template<> ::RVF::RVFMessage* Arena::CreateMaybeMessage<::RVF::RVFMessage>(Arena*);
template<> ::RVF::RVFSelectEvent* Arena::CreateMaybeMessage<::RVF::RVFSelectEvent>(Arena*);
template<> ::RVF::RVFStatus* Arena::CreateMaybeMessage<::RVF::RVFStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RVF {

enum RVFType : int {
  ERROR = 0,
  STATUS = 1,
  REQUEST = 2,
  RESPONSE = 3,
  WRAPPER = 4,
  RVFType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RVFType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RVFType_IsValid(int value);
constexpr RVFType RVFType_MIN = ERROR;
constexpr RVFType RVFType_MAX = WRAPPER;
constexpr int RVFType_ARRAYSIZE = RVFType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RVFType_descriptor();
template<typename T>
inline const std::string& RVFType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RVFType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RVFType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RVFType_descriptor(), enum_t_value);
}
inline bool RVFType_Parse(
    const std::string& name, RVFType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RVFType>(
    RVFType_descriptor(), name, value);
}
// ===================================================================

class RVFMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RVF.RVFMessage) */ {
 public:
  inline RVFMessage() : RVFMessage(nullptr) {};
  virtual ~RVFMessage();

  RVFMessage(const RVFMessage& from);
  RVFMessage(RVFMessage&& from) noexcept
    : RVFMessage() {
    *this = ::std::move(from);
  }

  inline RVFMessage& operator=(const RVFMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RVFMessage& operator=(RVFMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RVFMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RVFMessage* internal_default_instance() {
    return reinterpret_cast<const RVFMessage*>(
               &_RVFMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RVFMessage& a, RVFMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RVFMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RVFMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RVFMessage* New() const final {
    return CreateMaybeMessage<RVFMessage>(nullptr);
  }

  RVFMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RVFMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RVFMessage& from);
  void MergeFrom(const RVFMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RVFMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RVF.RVFMessage";
  }
  protected:
  explicit RVFMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rvfmessage_2eproto);
    return ::descriptor_table_rvfmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetanameFieldNumber = 3,
    kSerializedFieldNumber = 4,
    kUIDFieldNumber = 1,
    kRvfTypeFieldNumber = 2,
  };
  // string metaname = 3;
  void clear_metaname();
  const std::string& metaname() const;
  void set_metaname(const std::string& value);
  void set_metaname(std::string&& value);
  void set_metaname(const char* value);
  void set_metaname(const char* value, size_t size);
  std::string* mutable_metaname();
  std::string* release_metaname();
  void set_allocated_metaname(std::string* metaname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_metaname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metaname(
      std::string* metaname);
  private:
  const std::string& _internal_metaname() const;
  void _internal_set_metaname(const std::string& value);
  std::string* _internal_mutable_metaname();
  public:

  // bytes serialized = 4;
  void clear_serialized();
  const std::string& serialized() const;
  void set_serialized(const std::string& value);
  void set_serialized(std::string&& value);
  void set_serialized(const char* value);
  void set_serialized(const void* value, size_t size);
  std::string* mutable_serialized();
  std::string* release_serialized();
  void set_allocated_serialized(std::string* serialized);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serialized();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serialized(
      std::string* serialized);
  private:
  const std::string& _internal_serialized() const;
  void _internal_set_serialized(const std::string& value);
  std::string* _internal_mutable_serialized();
  public:

  // uint32 UID = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RVF.RVFType rvf_type = 2;
  void clear_rvf_type();
  ::RVF::RVFType rvf_type() const;
  void set_rvf_type(::RVF::RVFType value);
  private:
  ::RVF::RVFType _internal_rvf_type() const;
  void _internal_set_rvf_type(::RVF::RVFType value);
  public:

  // @@protoc_insertion_point(class_scope:RVF.RVFMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metaname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  int rvf_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rvfmessage_2eproto;
};
// -------------------------------------------------------------------

class RVFCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RVF.RVFCommand) */ {
 public:
  inline RVFCommand() : RVFCommand(nullptr) {};
  virtual ~RVFCommand();

  RVFCommand(const RVFCommand& from);
  RVFCommand(RVFCommand&& from) noexcept
    : RVFCommand() {
    *this = ::std::move(from);
  }

  inline RVFCommand& operator=(const RVFCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RVFCommand& operator=(RVFCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RVFCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RVFCommand* internal_default_instance() {
    return reinterpret_cast<const RVFCommand*>(
               &_RVFCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RVFCommand& a, RVFCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RVFCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RVFCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RVFCommand* New() const final {
    return CreateMaybeMessage<RVFCommand>(nullptr);
  }

  RVFCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RVFCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RVFCommand& from);
  void MergeFrom(const RVFCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RVFCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RVF.RVFCommand";
  }
  protected:
  explicit RVFCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rvfmessage_2eproto);
    return ::descriptor_table_rvfmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetanameFieldNumber = 3,
    kSerializedFieldNumber = 4,
    kIIDFieldNumber = 1,
    kRvfTypeFieldNumber = 2,
  };
  // string metaname = 3;
  void clear_metaname();
  const std::string& metaname() const;
  void set_metaname(const std::string& value);
  void set_metaname(std::string&& value);
  void set_metaname(const char* value);
  void set_metaname(const char* value, size_t size);
  std::string* mutable_metaname();
  std::string* release_metaname();
  void set_allocated_metaname(std::string* metaname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_metaname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metaname(
      std::string* metaname);
  private:
  const std::string& _internal_metaname() const;
  void _internal_set_metaname(const std::string& value);
  std::string* _internal_mutable_metaname();
  public:

  // bytes serialized = 4;
  void clear_serialized();
  const std::string& serialized() const;
  void set_serialized(const std::string& value);
  void set_serialized(std::string&& value);
  void set_serialized(const char* value);
  void set_serialized(const void* value, size_t size);
  std::string* mutable_serialized();
  std::string* release_serialized();
  void set_allocated_serialized(std::string* serialized);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serialized();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serialized(
      std::string* serialized);
  private:
  const std::string& _internal_serialized() const;
  void _internal_set_serialized(const std::string& value);
  std::string* _internal_mutable_serialized();
  public:

  // uint32 IID = 1;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::uint32 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iid() const;
  void _internal_set_iid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RVF.RVFType rvf_type = 2;
  void clear_rvf_type();
  ::RVF::RVFType rvf_type() const;
  void set_rvf_type(::RVF::RVFType value);
  private:
  ::RVF::RVFType _internal_rvf_type() const;
  void _internal_set_rvf_type(::RVF::RVFType value);
  public:

  // @@protoc_insertion_point(class_scope:RVF.RVFCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metaname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iid_;
  int rvf_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rvfmessage_2eproto;
};
// -------------------------------------------------------------------

class RVFError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RVF.RVFError) */ {
 public:
  inline RVFError() : RVFError(nullptr) {};
  virtual ~RVFError();

  RVFError(const RVFError& from);
  RVFError(RVFError&& from) noexcept
    : RVFError() {
    *this = ::std::move(from);
  }

  inline RVFError& operator=(const RVFError& from) {
    CopyFrom(from);
    return *this;
  }
  inline RVFError& operator=(RVFError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RVFError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RVFError* internal_default_instance() {
    return reinterpret_cast<const RVFError*>(
               &_RVFError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RVFError& a, RVFError& b) {
    a.Swap(&b);
  }
  inline void Swap(RVFError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RVFError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RVFError* New() const final {
    return CreateMaybeMessage<RVFError>(nullptr);
  }

  RVFError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RVFError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RVFError& from);
  void MergeFrom(const RVFError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RVFError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RVF.RVFError";
  }
  protected:
  explicit RVFError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rvfmessage_2eproto);
    return ::descriptor_table_rvfmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kUIDFieldNumber = 1,
    kRvfTypeFieldNumber = 2,
    kCodeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 UID = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RVF.RVFType rvf_type = 2;
  void clear_rvf_type();
  ::RVF::RVFType rvf_type() const;
  void set_rvf_type(::RVF::RVFType value);
  private:
  ::RVF::RVFType _internal_rvf_type() const;
  void _internal_set_rvf_type(::RVF::RVFType value);
  public:

  // uint32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RVF.RVFError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  int rvf_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rvfmessage_2eproto;
};
// -------------------------------------------------------------------

class RVFStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RVF.RVFStatus) */ {
 public:
  inline RVFStatus() : RVFStatus(nullptr) {};
  virtual ~RVFStatus();

  RVFStatus(const RVFStatus& from);
  RVFStatus(RVFStatus&& from) noexcept
    : RVFStatus() {
    *this = ::std::move(from);
  }

  inline RVFStatus& operator=(const RVFStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RVFStatus& operator=(RVFStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RVFStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RVFStatus* internal_default_instance() {
    return reinterpret_cast<const RVFStatus*>(
               &_RVFStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RVFStatus& a, RVFStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RVFStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RVFStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RVFStatus* New() const final {
    return CreateMaybeMessage<RVFStatus>(nullptr);
  }

  RVFStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RVFStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RVFStatus& from);
  void MergeFrom(const RVFStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RVFStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RVF.RVFStatus";
  }
  protected:
  explicit RVFStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rvfmessage_2eproto);
    return ::descriptor_table_rvfmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kUIDFieldNumber = 1,
    kRvfTypeFieldNumber = 2,
    kCodeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 UID = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RVF.RVFType rvf_type = 2;
  void clear_rvf_type();
  ::RVF::RVFType rvf_type() const;
  void set_rvf_type(::RVF::RVFType value);
  private:
  ::RVF::RVFType _internal_rvf_type() const;
  void _internal_set_rvf_type(::RVF::RVFType value);
  public:

  // uint32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RVF.RVFStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  int rvf_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rvfmessage_2eproto;
};
// -------------------------------------------------------------------

class RVFDataValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RVF.RVFDataValue) */ {
 public:
  inline RVFDataValue() : RVFDataValue(nullptr) {};
  virtual ~RVFDataValue();

  RVFDataValue(const RVFDataValue& from);
  RVFDataValue(RVFDataValue&& from) noexcept
    : RVFDataValue() {
    *this = ::std::move(from);
  }

  inline RVFDataValue& operator=(const RVFDataValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline RVFDataValue& operator=(RVFDataValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RVFDataValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RVFDataValue* internal_default_instance() {
    return reinterpret_cast<const RVFDataValue*>(
               &_RVFDataValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RVFDataValue& a, RVFDataValue& b) {
    a.Swap(&b);
  }
  inline void Swap(RVFDataValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RVFDataValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RVFDataValue* New() const final {
    return CreateMaybeMessage<RVFDataValue>(nullptr);
  }

  RVFDataValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RVFDataValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RVFDataValue& from);
  void MergeFrom(const RVFDataValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RVFDataValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RVF.RVFDataValue";
  }
  protected:
  explicit RVFDataValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rvfmessage_2eproto);
    return ::descriptor_table_rvfmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kUIDFieldNumber = 1,
    kNrbitsFieldNumber = 2,
  };
  // repeated uint32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // uint32 UID = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nrbits = 2;
  void clear_nrbits();
  ::PROTOBUF_NAMESPACE_ID::uint32 nrbits() const;
  void set_nrbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nrbits() const;
  void _internal_set_nrbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RVF.RVFDataValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nrbits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rvfmessage_2eproto;
};
// -------------------------------------------------------------------

class RVFSelectEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RVF.RVFSelectEvent) */ {
 public:
  inline RVFSelectEvent() : RVFSelectEvent(nullptr) {};
  virtual ~RVFSelectEvent();

  RVFSelectEvent(const RVFSelectEvent& from);
  RVFSelectEvent(RVFSelectEvent&& from) noexcept
    : RVFSelectEvent() {
    *this = ::std::move(from);
  }

  inline RVFSelectEvent& operator=(const RVFSelectEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RVFSelectEvent& operator=(RVFSelectEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RVFSelectEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RVFSelectEvent* internal_default_instance() {
    return reinterpret_cast<const RVFSelectEvent*>(
               &_RVFSelectEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RVFSelectEvent& a, RVFSelectEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RVFSelectEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RVFSelectEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RVFSelectEvent* New() const final {
    return CreateMaybeMessage<RVFSelectEvent>(nullptr);
  }

  RVFSelectEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RVFSelectEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RVFSelectEvent& from);
  void MergeFrom(const RVFSelectEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RVFSelectEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RVF.RVFSelectEvent";
  }
  protected:
  explicit RVFSelectEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rvfmessage_2eproto);
    return ::descriptor_table_rvfmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kPathFieldNumber = 1,
    kNrbitsFieldNumber = 2,
  };
  // repeated uint32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // uint32 nrbits = 2;
  void clear_nrbits();
  ::PROTOBUF_NAMESPACE_ID::uint32 nrbits() const;
  void set_nrbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nrbits() const;
  void _internal_set_nrbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RVF.RVFSelectEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nrbits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rvfmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RVFMessage

// uint32 UID = 1;
inline void RVFMessage::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFMessage::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFMessage::uid() const {
  // @@protoc_insertion_point(field_get:RVF.RVFMessage.UID)
  return _internal_uid();
}
inline void RVFMessage::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void RVFMessage::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:RVF.RVFMessage.UID)
}

// .RVF.RVFType rvf_type = 2;
inline void RVFMessage::clear_rvf_type() {
  rvf_type_ = 0;
}
inline ::RVF::RVFType RVFMessage::_internal_rvf_type() const {
  return static_cast< ::RVF::RVFType >(rvf_type_);
}
inline ::RVF::RVFType RVFMessage::rvf_type() const {
  // @@protoc_insertion_point(field_get:RVF.RVFMessage.rvf_type)
  return _internal_rvf_type();
}
inline void RVFMessage::_internal_set_rvf_type(::RVF::RVFType value) {
  
  rvf_type_ = value;
}
inline void RVFMessage::set_rvf_type(::RVF::RVFType value) {
  _internal_set_rvf_type(value);
  // @@protoc_insertion_point(field_set:RVF.RVFMessage.rvf_type)
}

// string metaname = 3;
inline void RVFMessage::clear_metaname() {
  metaname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RVFMessage::metaname() const {
  // @@protoc_insertion_point(field_get:RVF.RVFMessage.metaname)
  return _internal_metaname();
}
inline void RVFMessage::set_metaname(const std::string& value) {
  _internal_set_metaname(value);
  // @@protoc_insertion_point(field_set:RVF.RVFMessage.metaname)
}
inline std::string* RVFMessage::mutable_metaname() {
  // @@protoc_insertion_point(field_mutable:RVF.RVFMessage.metaname)
  return _internal_mutable_metaname();
}
inline const std::string& RVFMessage::_internal_metaname() const {
  return metaname_.Get();
}
inline void RVFMessage::_internal_set_metaname(const std::string& value) {
  
  metaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RVFMessage::set_metaname(std::string&& value) {
  
  metaname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RVF.RVFMessage.metaname)
}
inline void RVFMessage::set_metaname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RVF.RVFMessage.metaname)
}
inline void RVFMessage::set_metaname(const char* value,
    size_t size) {
  
  metaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RVF.RVFMessage.metaname)
}
inline std::string* RVFMessage::_internal_mutable_metaname() {
  
  return metaname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RVFMessage::release_metaname() {
  // @@protoc_insertion_point(field_release:RVF.RVFMessage.metaname)
  return metaname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RVFMessage::set_allocated_metaname(std::string* metaname) {
  if (metaname != nullptr) {
    
  } else {
    
  }
  metaname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metaname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RVF.RVFMessage.metaname)
}
inline std::string* RVFMessage::unsafe_arena_release_metaname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RVF.RVFMessage.metaname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return metaname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RVFMessage::unsafe_arena_set_allocated_metaname(
    std::string* metaname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (metaname != nullptr) {
    
  } else {
    
  }
  metaname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      metaname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RVF.RVFMessage.metaname)
}

// bytes serialized = 4;
inline void RVFMessage::clear_serialized() {
  serialized_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RVFMessage::serialized() const {
  // @@protoc_insertion_point(field_get:RVF.RVFMessage.serialized)
  return _internal_serialized();
}
inline void RVFMessage::set_serialized(const std::string& value) {
  _internal_set_serialized(value);
  // @@protoc_insertion_point(field_set:RVF.RVFMessage.serialized)
}
inline std::string* RVFMessage::mutable_serialized() {
  // @@protoc_insertion_point(field_mutable:RVF.RVFMessage.serialized)
  return _internal_mutable_serialized();
}
inline const std::string& RVFMessage::_internal_serialized() const {
  return serialized_.Get();
}
inline void RVFMessage::_internal_set_serialized(const std::string& value) {
  
  serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RVFMessage::set_serialized(std::string&& value) {
  
  serialized_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RVF.RVFMessage.serialized)
}
inline void RVFMessage::set_serialized(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RVF.RVFMessage.serialized)
}
inline void RVFMessage::set_serialized(const void* value,
    size_t size) {
  
  serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RVF.RVFMessage.serialized)
}
inline std::string* RVFMessage::_internal_mutable_serialized() {
  
  return serialized_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RVFMessage::release_serialized() {
  // @@protoc_insertion_point(field_release:RVF.RVFMessage.serialized)
  return serialized_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RVFMessage::set_allocated_serialized(std::string* serialized) {
  if (serialized != nullptr) {
    
  } else {
    
  }
  serialized_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RVF.RVFMessage.serialized)
}
inline std::string* RVFMessage::unsafe_arena_release_serialized() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RVF.RVFMessage.serialized)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return serialized_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RVFMessage::unsafe_arena_set_allocated_serialized(
    std::string* serialized) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serialized != nullptr) {
    
  } else {
    
  }
  serialized_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serialized, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RVF.RVFMessage.serialized)
}

// -------------------------------------------------------------------

// RVFCommand

// uint32 IID = 1;
inline void RVFCommand::clear_iid() {
  iid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFCommand::_internal_iid() const {
  return iid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFCommand::iid() const {
  // @@protoc_insertion_point(field_get:RVF.RVFCommand.IID)
  return _internal_iid();
}
inline void RVFCommand::_internal_set_iid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iid_ = value;
}
inline void RVFCommand::set_iid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:RVF.RVFCommand.IID)
}

// .RVF.RVFType rvf_type = 2;
inline void RVFCommand::clear_rvf_type() {
  rvf_type_ = 0;
}
inline ::RVF::RVFType RVFCommand::_internal_rvf_type() const {
  return static_cast< ::RVF::RVFType >(rvf_type_);
}
inline ::RVF::RVFType RVFCommand::rvf_type() const {
  // @@protoc_insertion_point(field_get:RVF.RVFCommand.rvf_type)
  return _internal_rvf_type();
}
inline void RVFCommand::_internal_set_rvf_type(::RVF::RVFType value) {
  
  rvf_type_ = value;
}
inline void RVFCommand::set_rvf_type(::RVF::RVFType value) {
  _internal_set_rvf_type(value);
  // @@protoc_insertion_point(field_set:RVF.RVFCommand.rvf_type)
}

// string metaname = 3;
inline void RVFCommand::clear_metaname() {
  metaname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RVFCommand::metaname() const {
  // @@protoc_insertion_point(field_get:RVF.RVFCommand.metaname)
  return _internal_metaname();
}
inline void RVFCommand::set_metaname(const std::string& value) {
  _internal_set_metaname(value);
  // @@protoc_insertion_point(field_set:RVF.RVFCommand.metaname)
}
inline std::string* RVFCommand::mutable_metaname() {
  // @@protoc_insertion_point(field_mutable:RVF.RVFCommand.metaname)
  return _internal_mutable_metaname();
}
inline const std::string& RVFCommand::_internal_metaname() const {
  return metaname_.Get();
}
inline void RVFCommand::_internal_set_metaname(const std::string& value) {
  
  metaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RVFCommand::set_metaname(std::string&& value) {
  
  metaname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RVF.RVFCommand.metaname)
}
inline void RVFCommand::set_metaname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RVF.RVFCommand.metaname)
}
inline void RVFCommand::set_metaname(const char* value,
    size_t size) {
  
  metaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RVF.RVFCommand.metaname)
}
inline std::string* RVFCommand::_internal_mutable_metaname() {
  
  return metaname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RVFCommand::release_metaname() {
  // @@protoc_insertion_point(field_release:RVF.RVFCommand.metaname)
  return metaname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RVFCommand::set_allocated_metaname(std::string* metaname) {
  if (metaname != nullptr) {
    
  } else {
    
  }
  metaname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metaname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RVF.RVFCommand.metaname)
}
inline std::string* RVFCommand::unsafe_arena_release_metaname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RVF.RVFCommand.metaname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return metaname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RVFCommand::unsafe_arena_set_allocated_metaname(
    std::string* metaname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (metaname != nullptr) {
    
  } else {
    
  }
  metaname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      metaname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RVF.RVFCommand.metaname)
}

// bytes serialized = 4;
inline void RVFCommand::clear_serialized() {
  serialized_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RVFCommand::serialized() const {
  // @@protoc_insertion_point(field_get:RVF.RVFCommand.serialized)
  return _internal_serialized();
}
inline void RVFCommand::set_serialized(const std::string& value) {
  _internal_set_serialized(value);
  // @@protoc_insertion_point(field_set:RVF.RVFCommand.serialized)
}
inline std::string* RVFCommand::mutable_serialized() {
  // @@protoc_insertion_point(field_mutable:RVF.RVFCommand.serialized)
  return _internal_mutable_serialized();
}
inline const std::string& RVFCommand::_internal_serialized() const {
  return serialized_.Get();
}
inline void RVFCommand::_internal_set_serialized(const std::string& value) {
  
  serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RVFCommand::set_serialized(std::string&& value) {
  
  serialized_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RVF.RVFCommand.serialized)
}
inline void RVFCommand::set_serialized(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RVF.RVFCommand.serialized)
}
inline void RVFCommand::set_serialized(const void* value,
    size_t size) {
  
  serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RVF.RVFCommand.serialized)
}
inline std::string* RVFCommand::_internal_mutable_serialized() {
  
  return serialized_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RVFCommand::release_serialized() {
  // @@protoc_insertion_point(field_release:RVF.RVFCommand.serialized)
  return serialized_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RVFCommand::set_allocated_serialized(std::string* serialized) {
  if (serialized != nullptr) {
    
  } else {
    
  }
  serialized_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RVF.RVFCommand.serialized)
}
inline std::string* RVFCommand::unsafe_arena_release_serialized() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RVF.RVFCommand.serialized)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return serialized_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RVFCommand::unsafe_arena_set_allocated_serialized(
    std::string* serialized) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serialized != nullptr) {
    
  } else {
    
  }
  serialized_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serialized, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RVF.RVFCommand.serialized)
}

// -------------------------------------------------------------------

// RVFError

// uint32 UID = 1;
inline void RVFError::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFError::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFError::uid() const {
  // @@protoc_insertion_point(field_get:RVF.RVFError.UID)
  return _internal_uid();
}
inline void RVFError::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void RVFError::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:RVF.RVFError.UID)
}

// .RVF.RVFType rvf_type = 2;
inline void RVFError::clear_rvf_type() {
  rvf_type_ = 0;
}
inline ::RVF::RVFType RVFError::_internal_rvf_type() const {
  return static_cast< ::RVF::RVFType >(rvf_type_);
}
inline ::RVF::RVFType RVFError::rvf_type() const {
  // @@protoc_insertion_point(field_get:RVF.RVFError.rvf_type)
  return _internal_rvf_type();
}
inline void RVFError::_internal_set_rvf_type(::RVF::RVFType value) {
  
  rvf_type_ = value;
}
inline void RVFError::set_rvf_type(::RVF::RVFType value) {
  _internal_set_rvf_type(value);
  // @@protoc_insertion_point(field_set:RVF.RVFError.rvf_type)
}

// string message = 3;
inline void RVFError::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RVFError::message() const {
  // @@protoc_insertion_point(field_get:RVF.RVFError.message)
  return _internal_message();
}
inline void RVFError::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:RVF.RVFError.message)
}
inline std::string* RVFError::mutable_message() {
  // @@protoc_insertion_point(field_mutable:RVF.RVFError.message)
  return _internal_mutable_message();
}
inline const std::string& RVFError::_internal_message() const {
  return message_.Get();
}
inline void RVFError::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RVFError::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RVF.RVFError.message)
}
inline void RVFError::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RVF.RVFError.message)
}
inline void RVFError::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RVF.RVFError.message)
}
inline std::string* RVFError::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RVFError::release_message() {
  // @@protoc_insertion_point(field_release:RVF.RVFError.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RVFError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RVF.RVFError.message)
}
inline std::string* RVFError::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RVF.RVFError.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RVFError::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RVF.RVFError.message)
}

// uint32 code = 4;
inline void RVFError::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFError::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFError::code() const {
  // @@protoc_insertion_point(field_get:RVF.RVFError.code)
  return _internal_code();
}
inline void RVFError::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void RVFError::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:RVF.RVFError.code)
}

// -------------------------------------------------------------------

// RVFStatus

// uint32 UID = 1;
inline void RVFStatus::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFStatus::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFStatus::uid() const {
  // @@protoc_insertion_point(field_get:RVF.RVFStatus.UID)
  return _internal_uid();
}
inline void RVFStatus::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void RVFStatus::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:RVF.RVFStatus.UID)
}

// .RVF.RVFType rvf_type = 2;
inline void RVFStatus::clear_rvf_type() {
  rvf_type_ = 0;
}
inline ::RVF::RVFType RVFStatus::_internal_rvf_type() const {
  return static_cast< ::RVF::RVFType >(rvf_type_);
}
inline ::RVF::RVFType RVFStatus::rvf_type() const {
  // @@protoc_insertion_point(field_get:RVF.RVFStatus.rvf_type)
  return _internal_rvf_type();
}
inline void RVFStatus::_internal_set_rvf_type(::RVF::RVFType value) {
  
  rvf_type_ = value;
}
inline void RVFStatus::set_rvf_type(::RVF::RVFType value) {
  _internal_set_rvf_type(value);
  // @@protoc_insertion_point(field_set:RVF.RVFStatus.rvf_type)
}

// string message = 3;
inline void RVFStatus::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RVFStatus::message() const {
  // @@protoc_insertion_point(field_get:RVF.RVFStatus.message)
  return _internal_message();
}
inline void RVFStatus::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:RVF.RVFStatus.message)
}
inline std::string* RVFStatus::mutable_message() {
  // @@protoc_insertion_point(field_mutable:RVF.RVFStatus.message)
  return _internal_mutable_message();
}
inline const std::string& RVFStatus::_internal_message() const {
  return message_.Get();
}
inline void RVFStatus::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RVFStatus::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RVF.RVFStatus.message)
}
inline void RVFStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RVF.RVFStatus.message)
}
inline void RVFStatus::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RVF.RVFStatus.message)
}
inline std::string* RVFStatus::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RVFStatus::release_message() {
  // @@protoc_insertion_point(field_release:RVF.RVFStatus.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RVFStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RVF.RVFStatus.message)
}
inline std::string* RVFStatus::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RVF.RVFStatus.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RVFStatus::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RVF.RVFStatus.message)
}

// uint32 code = 4;
inline void RVFStatus::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFStatus::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFStatus::code() const {
  // @@protoc_insertion_point(field_get:RVF.RVFStatus.code)
  return _internal_code();
}
inline void RVFStatus::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void RVFStatus::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:RVF.RVFStatus.code)
}

// -------------------------------------------------------------------

// RVFDataValue

// uint32 UID = 1;
inline void RVFDataValue::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFDataValue::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFDataValue::uid() const {
  // @@protoc_insertion_point(field_get:RVF.RVFDataValue.UID)
  return _internal_uid();
}
inline void RVFDataValue::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void RVFDataValue::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:RVF.RVFDataValue.UID)
}

// uint32 nrbits = 2;
inline void RVFDataValue::clear_nrbits() {
  nrbits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFDataValue::_internal_nrbits() const {
  return nrbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFDataValue::nrbits() const {
  // @@protoc_insertion_point(field_get:RVF.RVFDataValue.nrbits)
  return _internal_nrbits();
}
inline void RVFDataValue::_internal_set_nrbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nrbits_ = value;
}
inline void RVFDataValue::set_nrbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nrbits(value);
  // @@protoc_insertion_point(field_set:RVF.RVFDataValue.nrbits)
}

// repeated uint32 data = 3;
inline int RVFDataValue::_internal_data_size() const {
  return data_.size();
}
inline int RVFDataValue::data_size() const {
  return _internal_data_size();
}
inline void RVFDataValue::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFDataValue::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFDataValue::data(int index) const {
  // @@protoc_insertion_point(field_get:RVF.RVFDataValue.data)
  return _internal_data(index);
}
inline void RVFDataValue::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:RVF.RVFDataValue.data)
}
inline void RVFDataValue::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void RVFDataValue::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:RVF.RVFDataValue.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RVFDataValue::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RVFDataValue::data() const {
  // @@protoc_insertion_point(field_list:RVF.RVFDataValue.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RVFDataValue::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RVFDataValue::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:RVF.RVFDataValue.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// RVFSelectEvent

// string path = 1;
inline void RVFSelectEvent::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RVFSelectEvent::path() const {
  // @@protoc_insertion_point(field_get:RVF.RVFSelectEvent.path)
  return _internal_path();
}
inline void RVFSelectEvent::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:RVF.RVFSelectEvent.path)
}
inline std::string* RVFSelectEvent::mutable_path() {
  // @@protoc_insertion_point(field_mutable:RVF.RVFSelectEvent.path)
  return _internal_mutable_path();
}
inline const std::string& RVFSelectEvent::_internal_path() const {
  return path_.Get();
}
inline void RVFSelectEvent::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RVFSelectEvent::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RVF.RVFSelectEvent.path)
}
inline void RVFSelectEvent::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RVF.RVFSelectEvent.path)
}
inline void RVFSelectEvent::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RVF.RVFSelectEvent.path)
}
inline std::string* RVFSelectEvent::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RVFSelectEvent::release_path() {
  // @@protoc_insertion_point(field_release:RVF.RVFSelectEvent.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RVFSelectEvent::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RVF.RVFSelectEvent.path)
}
inline std::string* RVFSelectEvent::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RVF.RVFSelectEvent.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RVFSelectEvent::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RVF.RVFSelectEvent.path)
}

// uint32 nrbits = 2;
inline void RVFSelectEvent::clear_nrbits() {
  nrbits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFSelectEvent::_internal_nrbits() const {
  return nrbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFSelectEvent::nrbits() const {
  // @@protoc_insertion_point(field_get:RVF.RVFSelectEvent.nrbits)
  return _internal_nrbits();
}
inline void RVFSelectEvent::_internal_set_nrbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nrbits_ = value;
}
inline void RVFSelectEvent::set_nrbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nrbits(value);
  // @@protoc_insertion_point(field_set:RVF.RVFSelectEvent.nrbits)
}

// repeated uint32 data = 3;
inline int RVFSelectEvent::_internal_data_size() const {
  return data_.size();
}
inline int RVFSelectEvent::data_size() const {
  return _internal_data_size();
}
inline void RVFSelectEvent::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFSelectEvent::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RVFSelectEvent::data(int index) const {
  // @@protoc_insertion_point(field_get:RVF.RVFSelectEvent.data)
  return _internal_data(index);
}
inline void RVFSelectEvent::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:RVF.RVFSelectEvent.data)
}
inline void RVFSelectEvent::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void RVFSelectEvent::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:RVF.RVFSelectEvent.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RVFSelectEvent::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RVFSelectEvent::data() const {
  // @@protoc_insertion_point(field_list:RVF.RVFSelectEvent.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RVFSelectEvent::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RVFSelectEvent::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:RVF.RVFSelectEvent.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RVF

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RVF::RVFType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RVF::RVFType>() {
  return ::RVF::RVFType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rvfmessage_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rvfmessage.proto

#include "rvfmessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace RVF {
class RVFMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RVFMessage> _instance;
} _RVFMessage_default_instance_;
class RVFCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RVFCommand> _instance;
} _RVFCommand_default_instance_;
class RVFErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RVFError> _instance;
} _RVFError_default_instance_;
class RVFStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RVFStatus> _instance;
} _RVFStatus_default_instance_;
class RVFDataValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RVFDataValue> _instance;
} _RVFDataValue_default_instance_;
class RVFSelectEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RVFSelectEvent> _instance;
} _RVFSelectEvent_default_instance_;
}  // namespace RVF
static void InitDefaultsscc_info_RVFCommand_rvfmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RVF::_RVFCommand_default_instance_;
    new (ptr) ::RVF::RVFCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RVF::RVFCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RVFCommand_rvfmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RVFCommand_rvfmessage_2eproto}, {}};

static void InitDefaultsscc_info_RVFDataValue_rvfmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RVF::_RVFDataValue_default_instance_;
    new (ptr) ::RVF::RVFDataValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RVF::RVFDataValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RVFDataValue_rvfmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RVFDataValue_rvfmessage_2eproto}, {}};

static void InitDefaultsscc_info_RVFError_rvfmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RVF::_RVFError_default_instance_;
    new (ptr) ::RVF::RVFError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RVF::RVFError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RVFError_rvfmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RVFError_rvfmessage_2eproto}, {}};

static void InitDefaultsscc_info_RVFMessage_rvfmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RVF::_RVFMessage_default_instance_;
    new (ptr) ::RVF::RVFMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RVF::RVFMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RVFMessage_rvfmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RVFMessage_rvfmessage_2eproto}, {}};

static void InitDefaultsscc_info_RVFSelectEvent_rvfmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RVF::_RVFSelectEvent_default_instance_;
    new (ptr) ::RVF::RVFSelectEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RVF::RVFSelectEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RVFSelectEvent_rvfmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RVFSelectEvent_rvfmessage_2eproto}, {}};

static void InitDefaultsscc_info_RVFStatus_rvfmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RVF::_RVFStatus_default_instance_;
    new (ptr) ::RVF::RVFStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RVF::RVFStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RVFStatus_rvfmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RVFStatus_rvfmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rvfmessage_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rvfmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rvfmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rvfmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFMessage, uid_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFMessage, rvf_type_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFMessage, metaname_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFMessage, serialized_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFCommand, iid_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFCommand, rvf_type_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFCommand, metaname_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFCommand, serialized_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFError, uid_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFError, rvf_type_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFError, message_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFError, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFStatus, uid_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFStatus, rvf_type_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFStatus, message_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFStatus, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFDataValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFDataValue, uid_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFDataValue, nrbits_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFDataValue, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFSelectEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RVF::RVFSelectEvent, path_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFSelectEvent, nrbits_),
  PROTOBUF_FIELD_OFFSET(::RVF::RVFSelectEvent, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RVF::RVFMessage)},
  { 9, -1, sizeof(::RVF::RVFCommand)},
  { 18, -1, sizeof(::RVF::RVFError)},
  { 27, -1, sizeof(::RVF::RVFStatus)},
  { 36, -1, sizeof(::RVF::RVFDataValue)},
  { 44, -1, sizeof(::RVF::RVFSelectEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RVF::_RVFMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RVF::_RVFCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RVF::_RVFError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RVF::_RVFStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RVF::_RVFDataValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RVF::_RVFSelectEvent_default_instance_),
};

const char descriptor_table_protodef_rvfmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020rvfmessage.proto\022\003RVF\"_\n\nRVFMessage\022\013\n"
  "\003UID\030\001 \001(\r\022\036\n\010rvf_type\030\002 \001(\0162\014.RVF.RVFTy"
  "pe\022\020\n\010metaname\030\003 \001(\t\022\022\n\nserialized\030\004 \001(\014"
  "\"_\n\nRVFCommand\022\013\n\003IID\030\001 \001(\r\022\036\n\010rvf_type\030"
  "\002 \001(\0162\014.RVF.RVFType\022\020\n\010metaname\030\003 \001(\t\022\022\n"
  "\nserialized\030\004 \001(\014\"V\n\010RVFError\022\013\n\003UID\030\001 \001"
  "(\r\022\036\n\010rvf_type\030\002 \001(\0162\014.RVF.RVFType\022\017\n\007me"
  "ssage\030\003 \001(\t\022\014\n\004code\030\004 \001(\r\"W\n\tRVFStatus\022\013"
  "\n\003UID\030\001 \001(\r\022\036\n\010rvf_type\030\002 \001(\0162\014.RVF.RVFT"
  "ype\022\017\n\007message\030\003 \001(\t\022\014\n\004code\030\004 \001(\r\"9\n\014RV"
  "FDataValue\022\013\n\003UID\030\001 \001(\r\022\016\n\006nrbits\030\002 \001(\r\022"
  "\014\n\004data\030\003 \003(\r\"<\n\016RVFSelectEvent\022\014\n\004path\030"
  "\001 \001(\t\022\016\n\006nrbits\030\002 \001(\r\022\014\n\004data\030\003 \003(\r*H\n\007R"
  "VFType\022\t\n\005ERROR\020\000\022\n\n\006STATUS\020\001\022\013\n\007REQUEST"
  "\020\002\022\014\n\010RESPONSE\020\003\022\013\n\007WRAPPER\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rvfmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rvfmessage_2eproto_sccs[6] = {
  &scc_info_RVFCommand_rvfmessage_2eproto.base,
  &scc_info_RVFDataValue_rvfmessage_2eproto.base,
  &scc_info_RVFError_rvfmessage_2eproto.base,
  &scc_info_RVFMessage_rvfmessage_2eproto.base,
  &scc_info_RVFSelectEvent_rvfmessage_2eproto.base,
  &scc_info_RVFStatus_rvfmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rvfmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rvfmessage_2eproto = {
  false, false, descriptor_table_protodef_rvfmessage_2eproto, "rvfmessage.proto", 597,
  &descriptor_table_rvfmessage_2eproto_once, descriptor_table_rvfmessage_2eproto_sccs, descriptor_table_rvfmessage_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_rvfmessage_2eproto::offsets,
  file_level_metadata_rvfmessage_2eproto, 6, file_level_enum_descriptors_rvfmessage_2eproto, file_level_service_descriptors_rvfmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rvfmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rvfmessage_2eproto)), true);
namespace RVF {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RVFType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rvfmessage_2eproto);
  return file_level_enum_descriptors_rvfmessage_2eproto[0];
}
bool RVFType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RVFMessage::InitAsDefaultInstance() {
}
class RVFMessage::_Internal {
 public:
};

RVFMessage::RVFMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RVF.RVFMessage)
}
RVFMessage::RVFMessage(const RVFMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metaname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metaname().empty()) {
    metaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metaname(),
      GetArena());
  }
  serialized_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized().empty()) {
    serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized(),
      GetArena());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rvf_type_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(rvf_type_));
  // @@protoc_insertion_point(copy_constructor:RVF.RVFMessage)
}

void RVFMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RVFMessage_rvfmessage_2eproto.base);
  metaname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rvf_type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(rvf_type_));
}

RVFMessage::~RVFMessage() {
  // @@protoc_insertion_point(destructor:RVF.RVFMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RVFMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metaname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RVFMessage::ArenaDtor(void* object) {
  RVFMessage* _this = reinterpret_cast< RVFMessage* >(object);
  (void)_this;
}
void RVFMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RVFMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RVFMessage& RVFMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RVFMessage_rvfmessage_2eproto.base);
  return *internal_default_instance();
}


void RVFMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RVF.RVFMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metaname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rvf_type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(rvf_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RVFMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 UID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RVF.RVFType rvf_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rvf_type(static_cast<::RVF::RVFType>(val));
        } else goto handle_unusual;
        continue;
      // string metaname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metaname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RVF.RVFMessage.metaname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialized = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serialized();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RVFMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RVF.RVFMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 UID = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // .RVF.RVFType rvf_type = 2;
  if (this->rvf_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rvf_type(), target);
  }

  // string metaname = 3;
  if (this->metaname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metaname().data(), static_cast<int>(this->_internal_metaname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RVF.RVFMessage.metaname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metaname(), target);
  }

  // bytes serialized = 4;
  if (this->serialized().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serialized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RVF.RVFMessage)
  return target;
}

size_t RVFMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RVF.RVFMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metaname = 3;
  if (this->metaname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metaname());
  }

  // bytes serialized = 4;
  if (this->serialized().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized());
  }

  // uint32 UID = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // .RVF.RVFType rvf_type = 2;
  if (this->rvf_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rvf_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RVFMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RVF.RVFMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RVFMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RVFMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RVF.RVFMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RVF.RVFMessage)
    MergeFrom(*source);
  }
}

void RVFMessage::MergeFrom(const RVFMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RVF.RVFMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metaname().size() > 0) {
    _internal_set_metaname(from._internal_metaname());
  }
  if (from.serialized().size() > 0) {
    _internal_set_serialized(from._internal_serialized());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.rvf_type() != 0) {
    _internal_set_rvf_type(from._internal_rvf_type());
  }
}

void RVFMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RVF.RVFMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RVFMessage::CopyFrom(const RVFMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RVF.RVFMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RVFMessage::IsInitialized() const {
  return true;
}

void RVFMessage::InternalSwap(RVFMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metaname_.Swap(&other->metaname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_.Swap(&other->serialized_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RVFMessage, rvf_type_)
      + sizeof(RVFMessage::rvf_type_)
      - PROTOBUF_FIELD_OFFSET(RVFMessage, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RVFMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RVFCommand::InitAsDefaultInstance() {
}
class RVFCommand::_Internal {
 public:
};

RVFCommand::RVFCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RVF.RVFCommand)
}
RVFCommand::RVFCommand(const RVFCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metaname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metaname().empty()) {
    metaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metaname(),
      GetArena());
  }
  serialized_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized().empty()) {
    serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized(),
      GetArena());
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rvf_type_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(rvf_type_));
  // @@protoc_insertion_point(copy_constructor:RVF.RVFCommand)
}

void RVFCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RVFCommand_rvfmessage_2eproto.base);
  metaname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rvf_type_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(rvf_type_));
}

RVFCommand::~RVFCommand() {
  // @@protoc_insertion_point(destructor:RVF.RVFCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RVFCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metaname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RVFCommand::ArenaDtor(void* object) {
  RVFCommand* _this = reinterpret_cast< RVFCommand* >(object);
  (void)_this;
}
void RVFCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RVFCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RVFCommand& RVFCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RVFCommand_rvfmessage_2eproto.base);
  return *internal_default_instance();
}


void RVFCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:RVF.RVFCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metaname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rvf_type_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(rvf_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RVFCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 IID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RVF.RVFType rvf_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rvf_type(static_cast<::RVF::RVFType>(val));
        } else goto handle_unusual;
        continue;
      // string metaname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metaname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RVF.RVFCommand.metaname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialized = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serialized();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RVFCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RVF.RVFCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 IID = 1;
  if (this->iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_iid(), target);
  }

  // .RVF.RVFType rvf_type = 2;
  if (this->rvf_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rvf_type(), target);
  }

  // string metaname = 3;
  if (this->metaname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metaname().data(), static_cast<int>(this->_internal_metaname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RVF.RVFCommand.metaname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metaname(), target);
  }

  // bytes serialized = 4;
  if (this->serialized().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serialized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RVF.RVFCommand)
  return target;
}

size_t RVFCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RVF.RVFCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metaname = 3;
  if (this->metaname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metaname());
  }

  // bytes serialized = 4;
  if (this->serialized().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized());
  }

  // uint32 IID = 1;
  if (this->iid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iid());
  }

  // .RVF.RVFType rvf_type = 2;
  if (this->rvf_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rvf_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RVFCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RVF.RVFCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RVFCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RVFCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RVF.RVFCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RVF.RVFCommand)
    MergeFrom(*source);
  }
}

void RVFCommand::MergeFrom(const RVFCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RVF.RVFCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metaname().size() > 0) {
    _internal_set_metaname(from._internal_metaname());
  }
  if (from.serialized().size() > 0) {
    _internal_set_serialized(from._internal_serialized());
  }
  if (from.iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from.rvf_type() != 0) {
    _internal_set_rvf_type(from._internal_rvf_type());
  }
}

void RVFCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RVF.RVFCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RVFCommand::CopyFrom(const RVFCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RVF.RVFCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RVFCommand::IsInitialized() const {
  return true;
}

void RVFCommand::InternalSwap(RVFCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metaname_.Swap(&other->metaname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_.Swap(&other->serialized_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RVFCommand, rvf_type_)
      + sizeof(RVFCommand::rvf_type_)
      - PROTOBUF_FIELD_OFFSET(RVFCommand, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RVFCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RVFError::InitAsDefaultInstance() {
}
class RVFError::_Internal {
 public:
};

RVFError::RVFError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RVF.RVFError)
}
RVFError::RVFError(const RVFError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:RVF.RVFError)
}

void RVFError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RVFError_rvfmessage_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
}

RVFError::~RVFError() {
  // @@protoc_insertion_point(destructor:RVF.RVFError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RVFError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RVFError::ArenaDtor(void* object) {
  RVFError* _this = reinterpret_cast< RVFError* >(object);
  (void)_this;
}
void RVFError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RVFError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RVFError& RVFError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RVFError_rvfmessage_2eproto.base);
  return *internal_default_instance();
}


void RVFError::Clear() {
// @@protoc_insertion_point(message_clear_start:RVF.RVFError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RVFError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 UID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RVF.RVFType rvf_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rvf_type(static_cast<::RVF::RVFType>(val));
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RVF.RVFError.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RVFError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RVF.RVFError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 UID = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // .RVF.RVFType rvf_type = 2;
  if (this->rvf_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rvf_type(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RVF.RVFError.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // uint32 code = 4;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RVF.RVFError)
  return target;
}

size_t RVFError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RVF.RVFError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint32 UID = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // .RVF.RVFType rvf_type = 2;
  if (this->rvf_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rvf_type());
  }

  // uint32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RVFError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RVF.RVFError)
  GOOGLE_DCHECK_NE(&from, this);
  const RVFError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RVFError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RVF.RVFError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RVF.RVFError)
    MergeFrom(*source);
  }
}

void RVFError::MergeFrom(const RVFError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RVF.RVFError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.rvf_type() != 0) {
    _internal_set_rvf_type(from._internal_rvf_type());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void RVFError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RVF.RVFError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RVFError::CopyFrom(const RVFError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RVF.RVFError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RVFError::IsInitialized() const {
  return true;
}

void RVFError::InternalSwap(RVFError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RVFError, code_)
      + sizeof(RVFError::code_)
      - PROTOBUF_FIELD_OFFSET(RVFError, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RVFError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RVFStatus::InitAsDefaultInstance() {
}
class RVFStatus::_Internal {
 public:
};

RVFStatus::RVFStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RVF.RVFStatus)
}
RVFStatus::RVFStatus(const RVFStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:RVF.RVFStatus)
}

void RVFStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RVFStatus_rvfmessage_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
}

RVFStatus::~RVFStatus() {
  // @@protoc_insertion_point(destructor:RVF.RVFStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RVFStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RVFStatus::ArenaDtor(void* object) {
  RVFStatus* _this = reinterpret_cast< RVFStatus* >(object);
  (void)_this;
}
void RVFStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RVFStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RVFStatus& RVFStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RVFStatus_rvfmessage_2eproto.base);
  return *internal_default_instance();
}


void RVFStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:RVF.RVFStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RVFStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 UID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RVF.RVFType rvf_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rvf_type(static_cast<::RVF::RVFType>(val));
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RVF.RVFStatus.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RVFStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RVF.RVFStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 UID = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // .RVF.RVFType rvf_type = 2;
  if (this->rvf_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rvf_type(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RVF.RVFStatus.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // uint32 code = 4;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RVF.RVFStatus)
  return target;
}

size_t RVFStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RVF.RVFStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint32 UID = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // .RVF.RVFType rvf_type = 2;
  if (this->rvf_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rvf_type());
  }

  // uint32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RVFStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RVF.RVFStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RVFStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RVFStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RVF.RVFStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RVF.RVFStatus)
    MergeFrom(*source);
  }
}

void RVFStatus::MergeFrom(const RVFStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RVF.RVFStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.rvf_type() != 0) {
    _internal_set_rvf_type(from._internal_rvf_type());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void RVFStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RVF.RVFStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RVFStatus::CopyFrom(const RVFStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RVF.RVFStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RVFStatus::IsInitialized() const {
  return true;
}

void RVFStatus::InternalSwap(RVFStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RVFStatus, code_)
      + sizeof(RVFStatus::code_)
      - PROTOBUF_FIELD_OFFSET(RVFStatus, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RVFStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RVFDataValue::InitAsDefaultInstance() {
}
class RVFDataValue::_Internal {
 public:
};

RVFDataValue::RVFDataValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RVF.RVFDataValue)
}
RVFDataValue::RVFDataValue(const RVFDataValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nrbits_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(nrbits_));
  // @@protoc_insertion_point(copy_constructor:RVF.RVFDataValue)
}

void RVFDataValue::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nrbits_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(nrbits_));
}

RVFDataValue::~RVFDataValue() {
  // @@protoc_insertion_point(destructor:RVF.RVFDataValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RVFDataValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RVFDataValue::ArenaDtor(void* object) {
  RVFDataValue* _this = reinterpret_cast< RVFDataValue* >(object);
  (void)_this;
}
void RVFDataValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RVFDataValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RVFDataValue& RVFDataValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RVFDataValue_rvfmessage_2eproto.base);
  return *internal_default_instance();
}


void RVFDataValue::Clear() {
// @@protoc_insertion_point(message_clear_start:RVF.RVFDataValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nrbits_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(nrbits_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RVFDataValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 UID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nrbits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nrbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RVFDataValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RVF.RVFDataValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 UID = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // uint32 nrbits = 2;
  if (this->nrbits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nrbits(), target);
  }

  // repeated uint32 data = 3;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RVF.RVFDataValue)
  return target;
}

size_t RVFDataValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RVF.RVFDataValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 UID = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 nrbits = 2;
  if (this->nrbits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nrbits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RVFDataValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RVF.RVFDataValue)
  GOOGLE_DCHECK_NE(&from, this);
  const RVFDataValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RVFDataValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RVF.RVFDataValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RVF.RVFDataValue)
    MergeFrom(*source);
  }
}

void RVFDataValue::MergeFrom(const RVFDataValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RVF.RVFDataValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.nrbits() != 0) {
    _internal_set_nrbits(from._internal_nrbits());
  }
}

void RVFDataValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RVF.RVFDataValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RVFDataValue::CopyFrom(const RVFDataValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RVF.RVFDataValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RVFDataValue::IsInitialized() const {
  return true;
}

void RVFDataValue::InternalSwap(RVFDataValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RVFDataValue, nrbits_)
      + sizeof(RVFDataValue::nrbits_)
      - PROTOBUF_FIELD_OFFSET(RVFDataValue, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RVFDataValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RVFSelectEvent::InitAsDefaultInstance() {
}
class RVFSelectEvent::_Internal {
 public:
};

RVFSelectEvent::RVFSelectEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RVF.RVFSelectEvent)
}
RVFSelectEvent::RVFSelectEvent(const RVFSelectEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  nrbits_ = from.nrbits_;
  // @@protoc_insertion_point(copy_constructor:RVF.RVFSelectEvent)
}

void RVFSelectEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RVFSelectEvent_rvfmessage_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nrbits_ = 0u;
}

RVFSelectEvent::~RVFSelectEvent() {
  // @@protoc_insertion_point(destructor:RVF.RVFSelectEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RVFSelectEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RVFSelectEvent::ArenaDtor(void* object) {
  RVFSelectEvent* _this = reinterpret_cast< RVFSelectEvent* >(object);
  (void)_this;
}
void RVFSelectEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RVFSelectEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RVFSelectEvent& RVFSelectEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RVFSelectEvent_rvfmessage_2eproto.base);
  return *internal_default_instance();
}


void RVFSelectEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:RVF.RVFSelectEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nrbits_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RVFSelectEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RVF.RVFSelectEvent.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nrbits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nrbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RVFSelectEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RVF.RVFSelectEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RVF.RVFSelectEvent.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint32 nrbits = 2;
  if (this->nrbits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nrbits(), target);
  }

  // repeated uint32 data = 3;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RVF.RVFSelectEvent)
  return target;
}

size_t RVFSelectEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RVF.RVFSelectEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // uint32 nrbits = 2;
  if (this->nrbits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nrbits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RVFSelectEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RVF.RVFSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RVFSelectEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RVFSelectEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RVF.RVFSelectEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RVF.RVFSelectEvent)
    MergeFrom(*source);
  }
}

void RVFSelectEvent::MergeFrom(const RVFSelectEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RVF.RVFSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.nrbits() != 0) {
    _internal_set_nrbits(from._internal_nrbits());
  }
}

void RVFSelectEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RVF.RVFSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RVFSelectEvent::CopyFrom(const RVFSelectEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RVF.RVFSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RVFSelectEvent::IsInitialized() const {
  return true;
}

void RVFSelectEvent::InternalSwap(RVFSelectEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nrbits_, other->nrbits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RVFSelectEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RVF
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RVF::RVFMessage* Arena::CreateMaybeMessage< ::RVF::RVFMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RVF::RVFMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RVF::RVFCommand* Arena::CreateMaybeMessage< ::RVF::RVFCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RVF::RVFCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::RVF::RVFError* Arena::CreateMaybeMessage< ::RVF::RVFError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RVF::RVFError >(arena);
}
template<> PROTOBUF_NOINLINE ::RVF::RVFStatus* Arena::CreateMaybeMessage< ::RVF::RVFStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RVF::RVFStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::RVF::RVFDataValue* Arena::CreateMaybeMessage< ::RVF::RVFDataValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RVF::RVFDataValue >(arena);
}
template<> PROTOBUF_NOINLINE ::RVF::RVFSelectEvent* Arena::CreateMaybeMessage< ::RVF::RVFSelectEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RVF::RVFSelectEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
